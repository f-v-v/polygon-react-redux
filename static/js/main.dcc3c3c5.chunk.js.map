{"version":3,"sources":["cpmponents/header/header.js","cpmponents/header/index.js","cpmponents/pages/home.js","cpmponents/spinner/index.js","cpmponents/spinner/spinner.js","cpmponents/error-indicator/index.js","cpmponents/error-indicator/error-indicator.js","services/base-swapi-service.js","services/film-servise.js","services/planet-servise.js","actions/films.js","cpmponents/row/index.js","cpmponents/row/row.js","cpmponents/item-details/item-details.js","cpmponents/item-details/index.js","cpmponents/pages/films-page-componets/planet-details.js","cpmponents/pages/films-page-componets/film-details.js","cpmponents/item-list/index.js","cpmponents/item-list/item-list.js","cpmponents/pages/films-page-componets/planets-list.js","cpmponents/pages/films-page-componets/films-list.js","cpmponents/pages/films-page.js","actions/characters.js","services/character-servise.js","cpmponents/sort-panel/index.js","cpmponents/sort-panel/sort-panel.js","cpmponents/pages/characters-page-component/character-sort-panel.js","actions/filter-characters.js","cpmponents/card-3d/index.js","cpmponents/card-3d/card-3d.js","cpmponents/card-item/index.js","cpmponents/card-item/card-item.js","cpmponents/grid-cards/index.js","cpmponents/grid-cards/grid-cards.js","cpmponents/pages/characters-page-component/character-grid.js","cpmponents/search-input/index.js","cpmponents/search-input/search-input.js","cpmponents/pages/characters-page-component/character-inner-search-panel.js","cpmponents/search-panel/index.js","cpmponents/search-panel/search-panel.js","cpmponents/pages/characters-page-component/character-server-search-panel.js","cpmponents/paginetion/paginationLink.js","cpmponents/paginetion/index.js","cpmponents/paginetion/pagination.js","cpmponents/pages/characters-page-component/character-pagination.js","cpmponents/pages/characters-page.js","cpmponents/pages/planets-page.js","actions/starships.js","services/starship-servise.js","cpmponents/pages/starships-page-component/starship-grid.js","cpmponents/pages/starships-page-component/starship-pagination.js","cpmponents/pages/starships-page-component/starhip-server-search-panel.js","cpmponents/pages/starships-page.js","cpmponents/app/app.js","cpmponents/app/index.js","reducers/character-page.js","reducers/film-page.js","reducers/planet-page.js","reducers/starship-page.js","reducers/filter-characters.js","reducers/index.js","store.js","index.js"],"names":["Header","className","to","HomePage","Spinner","ErrorIndicator","error","baseSWApiService","_apiBase","_imageBase","_instanceApi","axios","create","baseURL","this","_instanceImg","_getResurse","url","a","get","res","status","data","Error","_extractId","match","filmsApi","_subApiUrl","_subImgUrl","_transformData","film","id","img","fetchImgFilm","title","dicription","opening_crawl","director","producer","release","release_date","characters","map","e","planets","_transformDataShort","_helperTransform","short","arr","results","fn","allFilms","totalFilms","count","fetchAllFilms","page","fetchFilmById","fetchFilmByArrayId","array","Promise","all","result","fetchSearchFilm","searchName","planetsApi","planet","fetchImgPlanet","name","diameter","climate","gravity","terrain","population","residents","films","allPlanets","totalPlanets","fetchAllPlanets","fetchPlanetById","charater","fetchPlanetByArrayId","fetchSearchPlanet","apiFilm","filmApi","apiPlanet","planetApi","getFilmAndRelation","dispatch","getState","currentId","filmsPage","currentFilm","type","then","payload","filmLoaded","filmError","message","currentFilmFull","length","relationPlanet","relationPlanetLoaded","relationPlanetError","Row","left","right","Record","props","item","field","label","Details","children","React","Children","child","cloneElement","ItemDetails","image","src","alt","connect","currentPlanetIndex","isLoading","isError","ItemList","items","currentIndex","changeCurrentItem","setCurrentItem","renderLabel","viewItems","index","classActive","key","onClick","tabIndex","onKeyDown","preventDefault","renderName","mapDispatchToProps","setCurrentRelPlanet","changeCurrentRelPlanet","upDown","renderTitle","setCurrentFilmWithRel","setCurrentFilm","changeCurrentFilmWithRel","curIdold","changeCurrentFilm","FilmsPage","componentDidMount","getAllFilms","Component","allFilmsLoaded","allFilmsError","api","character","fetchImgCharacter","gender","height","mass","birthYear","birth_year","homeworld","allCharacters","totalCharacters","fetchAllCharacters","fetchCharacterById","fetchCharactersByArrayId","fetchSearchCharacter","allCharactersLoaded","allCharactersError","setCurrentPage","getAllCharacters","search","charactersPage","serverSearch","catch","SortPanel","arraySortBy","sortBy","onSortByChange","buttons","classNames","data-toggle","setSortBy","filterCharacters","Card3d","front","back","CardItem","fields","mapFields","GridCards","grid","compareName","b","myParseInt","x","parseInt","isNaN","compareNum","compareMass","compareHeight","sort","newArray","innerSearch","filter","toLowerCase","indexOf","SearchInput","onChangeSearch","placeholder","aria-label","value","onChange","target","setInnerSearch","innetSearch","SearchPanel","onSubmitSearch","onSubmit","setServerSearch","PaginationLink","total","currentPage","baseRefUrl","console","log","prev","next","Math","ceil","arrButtons","Array","from","v","i","curPage","aria-disabled","pageButtons","Pagination","getData","prevClick","nextClick","CharactersPage","role","PlanetsPage","starship","fetchImgStarship","model","cost","cost_in_credits","crew","manufacturer","allStarships","totalStarships","fetchAllStarships","fetchStarshipById","fetchStarshipByArrayId","fetchSearchStarship","allStarshipsLoaded","allStarshipsError","starships","starshipsPage","compose","withRouter","history","searchString","push","redirectToSearch","StarshipsPage","getAllStarships","componentDidUpdate","prevProps","prevState","snapshot","searchIn","App","path","component","exact","render","params","initialState","state","action","newIndex","newIndexPlanet","currentPlanet","planetsPage","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.dcc3c3c5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.css';\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\" >\r\n            <ul className=\"d-flex justify-content-center\">\r\n                <li>\r\n                    <Link to=\"/\">HOME</Link> \r\n                </li>\r\n                <li>\r\n                    <Link to=\"/films\">FILMS</Link> \r\n                </li>\r\n                <li>\r\n                    <Link to=\"/characters/\">PEOPLE</Link>     \r\n                </li>\r\n                <li>\r\n                    <Link to=\"/starships/1/\">STARSHIPS</Link>     \r\n                </li>\r\n                <li>\r\n                    <Link to=\"/planets\">PLANETS</Link>     \r\n                </li>\r\n            </ul>\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import Header from './header';\r\nexport default Header;","import React from 'react';\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div>\r\n            <p> Это мой \"полигон\" по изучению react и redux. В качестве backend я искользовал api https://swapi.co/. На каждой из страниц изучается что-то конкретное, поэтому все страницы разные.\r\n            </p>\r\n            <p>\r\n                Cтраница FILMS - работа со связанными списками и переход по элементам списка с помощью клавишей стрелок.\r\n            </p>\r\n            <p>\r\n                Страница PEOPLE - 3d карточки(css), сортировка и поиск внутри страницы, поиск на сервере и пагинация.\r\n            </p>\r\n            <p>\r\n                Страница STRARSHIPS - то-же что и на PEOPLE но с использование роутинга, с целью глубже изучить react-router (или чего-то другого)\r\n            </p>\r\n            <p> (TODO: \r\n                разобаться и попробоать через location используя ссылки вида /starships?page=1&search=al. Поправить разметку в карточках)\r\n            </p>\r\n            <p>\r\n                Страница PLANETS - пока не решил.\r\n            </p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default HomePage;\r\n","import Spinner from './spinner';\r\nexport default Spinner;","import React from 'react';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n    <div className=\"fancy-spinner\">\r\n      <div className=\"ring\"></div>\r\n      <div className=\"ring\"></div>\r\n      <div className=\"dot\"></div>\r\n    </div>);\r\n}\r\n\r\nexport default Spinner;","import ErrorIndicator from './error-indicator';\r\nexport default ErrorIndicator;","import React from 'react';\r\nimport './error-indicator.css'\r\n\r\nconst ErrorIndicator = ({error}) => {\r\n    return (<div>\r\n            <span>Oh, Error: {error}</span> \r\n         </div>);\r\n}\r\n\r\nexport default ErrorIndicator;","import axios from 'axios';\r\n\r\nexport default class baseSWApiService {\r\n    _apiBase = 'https://swapi.co/api';\r\n    _imageBase = 'https://starwars-visualguide.com/assets/img';\r\n    \r\n    _instanceApi = axios.create({\r\n        baseURL: this._apiBase,\r\n    });\r\n\r\n    _instanceImg = axios.create({\r\n        baseURL: this._imageBase,\r\n    });\r\n\r\n    _getResurse = async (url) => {\r\n        const res = await this._instanceApi.get(url);\r\n\r\n        if (res.status === 200) {\r\n            return res.data\r\n        }\r\n\r\n        throw new Error (`Could not fetch ${url}` +\r\n        `, received ${res.status}`)\r\n    }\r\n\r\n    _extractId = (url) => {\r\n        const idRegExp = /\\/([0-9]*)\\/$/;\r\n        return +url.match(idRegExp)[1];\r\n    };\r\n     \r\n}\r\n","import baseSWApiService from './base-swapi-service';\r\n\r\nexport default class filmsApi extends baseSWApiService {\r\n    _subApiUrl= '/films/';\r\n    _subImgUrl = '/films/';\r\n    \r\n    _transformData = (film) => {\r\n        const id = this._extractId(film.url); \r\n        const newFilm = {\r\n            id:id,\r\n            img: this.fetchImgFilm(id),\r\n            title: film.title,\r\n            dicription: film.opening_crawl,\r\n            director: film.director,\r\n            producer: film.producer,\r\n            release: film.release_date,\r\n            characters: film.characters.map((e) => {\r\n                    return this._extractId(e);\r\n            }),\r\n            planets: film.planets.map((e) => {\r\n                return this._extractId(e);\r\n        }),\r\n        }\r\n        return newFilm;\r\n    }\r\n    \r\n    _transformDataShort = (film) => {\r\n        const id = this._extractId(film.url); \r\n        const newFilm = {\r\n            id:id,\r\n            img: this.fetchImgFilm(id),\r\n            title: film.title\r\n        }\r\n        return newFilm;\r\n    }\r\n\r\n    _helperTransform = (data, short) => {\r\n        const arr = data.results;\r\n        const fn = short?this._transformDataShort:this._transformData;\r\n        return {\r\n            allFilms:arr.map(fn),\r\n            totalFilms:data.count\r\n            }\r\n\r\n    }\r\n\r\n    fetchAllFilms = async (page = 1, short = true) => {\r\n        let url = this._subApiUrl;\r\n        if (page > 1) {\r\n            url+=`?page=${page}`;\r\n        }\r\n        const data= await this._getResurse(url);\r\n        return this._helperTransform (data, short);\r\n    }\r\n    \r\n    fetchFilmById = async (id, short = false) => {\r\n        const film = await this._getResurse(`${this._subApiUrl}${id}/`);\r\n        if (short) {return this._transformDataShort(film);}\r\n        return this._transformData(film);\r\n    }\r\n\r\n    fetchImgFilm = (id) => {\r\n        return `${this._imageBase}${this._subImgUrl}${id}.jpg`;\r\n    }\r\n\r\n    fetchFilmByArrayId = async (array, short=true) =>{\r\n        const result = await Promise.all(array.map(e => this.fetchFilmById(e, short)));\r\n        return result;\r\n    }\r\n\r\n    fetchSearchFilm = async (searchName = '', short = true) => {\r\n        let url = this._subApiUrl;\r\n        url+=`?search=${searchName}`;\r\n        const data= await this._getResurse(url);\r\n        return this._helperTransform (data, short);\r\n    }\r\n}","import baseSWApiService from './base-swapi-service';\r\n\r\nexport default class planetsApi extends baseSWApiService {\r\n    _subApiUrl= '/planets/';\r\n    _subImgUrl = '/planets/';\r\n    \r\n    _transformData = (planet) => {\r\n        const id = this._extractId(planet.url); \r\n        const newPlanet = {\r\n            id:this._extractId(planet.url),\r\n            img: this.fetchImgPlanet(id),\r\n            name: planet.name,\r\n            diameter: planet.diameter,\r\n            climate: planet.climate,\r\n            gravity: planet.gravity,\r\n            terrain: planet.terrain,\r\n            population: planet.population,\r\n            characters: planet.residents.map((e) => {\r\n                    return this._extractId(e);\r\n            }),\r\n            films: planet.films.map((e) => {\r\n                return this._extractId(e);\r\n        }),\r\n        }\r\n        return newPlanet;\r\n    }\r\n    \r\n    _transformDataShort = (planet) => {\r\n        const id = this._extractId(planet.url); \r\n        const newPlanet = {\r\n            id:this._extractId(planet.url),\r\n            img: this.fetchImgPlanet(id),\r\n            name: planet.name\r\n        }\r\n        return newPlanet;\r\n    }\r\n\r\n    _helperTransform = (data, short) => {\r\n        const arr = data.results;\r\n        const fn = short?this._transformDataShort:this._transformData;\r\n        return {\r\n            allPlanets:arr.map(fn),\r\n            totalPlanets:data.count\r\n            }\r\n\r\n    }\r\n\r\n    fetchAllPlanets = async (page = 1, short = true) => {\r\n        let url = this._subApiUrl;\r\n        if (page > 1) {\r\n            url+=`?page=${page}`;\r\n        }\r\n        const data= await this._getResurse(url);\r\n        return this._helperTransform (data, short);\r\n    }\r\n    \r\n    fetchPlanetById = async (id, short = false) => {\r\n        const charater = await this._getResurse(`${this._subApiUrl}${id}/`);\r\n        if (short) {return this._transformDataShort(charater);}\r\n        return this._transformData(charater);\r\n    }\r\n\r\n    fetchImgPlanet = (id) => {\r\n        return `${this._imageBase}${this._subImgUrl}${id}.jpg`;\r\n    }\r\n\r\n    fetchPlanetByArrayId = async (array, short=true) =>{\r\n        const result = await Promise.all(array.map(e => this.fetchPlanetById(e, short)));\r\n        return result;\r\n    }\r\n\r\n    fetchSearchPlanet = async (searchName = '', short = true) => {\r\n        let url = this._subApiUrl;\r\n        url+=`?search=${searchName}`;\r\n        const data= await this._getResurse(url);\r\n        return this._helperTransform (data, short);\r\n    }\r\n}","import filmApi from '../services/film-servise';\r\nimport planetApi from '../services/planet-servise';\r\n\r\nconst FETCH_ALL_FILMS_REQUEST = 'FETCH_ALL_FILMS_REQUEST';\r\nconst FETCH_ALL_FILMS_SUCCESS = 'FETCH_ALL_FILMS_SUCCESS';\r\nconst FETCH_ALL_FILMS_FAILURE = 'FETCH_ALL_FILMS_FAILURE';\r\nconst CHANGE_CURRENT_FILM ='CHANGE_CURRENT_FILM';\r\nconst SET_CURRENT_FILM = 'SET_CURRENT_FILM';\r\nconst FETCH_RELATION_PLANETS_REQUEST = 'FETCH_RELATION_PLANETS_REQUEST';\r\nconst FETCH_RELATION_PLANETS_SUCCESS = 'FETCH_RELATION_PLANETS_SUCCESS';\r\nconst FETCH_RELATION_PLANETS_FAILURE = 'FETCH_RELATION_PLANETS_FAILURE';\r\nconst CHANGE_CURRENT_RELATION_PLANET = 'CHANGE_CURRENT_RELATION_PLANET';\r\nconst SET_CURRENT_RELATION_PLANET = 'SET_CURRENT_RELATION_PLANET';\r\nconst FETCH_CURRENT_FILM_REQUEST = 'FETCH_CURRENT_FILM_REQUEST';\r\nconst FETCH_CURRENT_FILM_SUCCESS = 'FETCH_CURRENT_FILM_SUCCESS';\r\nconst FETCH_CURRENT_FILM_FAILURE = 'FETCH_CURRENT_FILM_FAILURE';\r\n\r\nconst apiFilm = new filmApi();\r\nconst apiPlanet = new planetApi();\r\nconst allFilmsRequested = () => {\r\n    return {type: FETCH_ALL_FILMS_REQUEST }\r\n};\r\nconst allFilmsLoaded = (allFilms) => {\r\n    return {\r\n        type: FETCH_ALL_FILMS_SUCCESS,\r\n        payload: allFilms\r\n    }\r\n};\r\nconst allFilmsError = (error) => {\r\n    return {\r\n        type: FETCH_ALL_FILMS_FAILURE,\r\n        payload:error\r\n    }\r\n};\r\n\r\nexport const changeCurrentFilm = (upDown) => {\r\n    return {\r\n        type: CHANGE_CURRENT_FILM,\r\n        payload:upDown\r\n    }\r\n};\r\n\r\nexport const setCurrentFilm = (index) => {\r\n    return {\r\n        type: SET_CURRENT_FILM,\r\n        payload: index\r\n    }\r\n}\r\n\r\nconst relationPlanetRequested = () => {\r\n    return { type:FETCH_RELATION_PLANETS_REQUEST };\r\n}\r\n\r\nconst relationPlanetLoaded = (relationPlanet) => {\r\n    return { \r\n        type:FETCH_RELATION_PLANETS_SUCCESS,\r\n        payload: relationPlanet\r\n    };\r\n}\r\n\r\nconst relationPlanetError = (error) => {\r\n    return { \r\n        type:FETCH_RELATION_PLANETS_FAILURE,\r\n        payload: error\r\n    };\r\n}\r\n\r\nexport const changeCurrentRelPlanet = (upDown) => {\r\n    return {\r\n        type: CHANGE_CURRENT_RELATION_PLANET,\r\n        payload:upDown\r\n    }\r\n};\r\n\r\nexport const setCurrentRelPlanet = (index) => {\r\n    return {\r\n        type: SET_CURRENT_RELATION_PLANET,\r\n        payload: index\r\n    }\r\n}\r\n\r\nconst filmRequested = () => {\r\n    return { type:FETCH_CURRENT_FILM_REQUEST };\r\n}\r\n\r\nconst filmLoaded = (film) => {\r\n    return { \r\n        type:FETCH_CURRENT_FILM_SUCCESS,\r\n        payload: film\r\n    };\r\n}\r\n\r\nconst filmError = (error) => {\r\n    return { \r\n        type:FETCH_CURRENT_FILM_FAILURE,\r\n        payload: error\r\n    };\r\n}\r\n\r\nconst getFilm = (id) => (dispatch) =>  {\r\n    dispatch(filmRequested());\r\n    return apiFilm.fetchFilmById(id).then(\r\n        (film) => dispatch(filmLoaded(film)), \r\n        (error) => dispatch(filmError(error.message))\r\n    )\r\n};\r\n\r\nconst getRelationPlanets = (arr) => (dispatch) =>  {\r\n    dispatch(relationPlanetRequested());\r\n    return apiPlanet.fetchPlanetByArrayId(arr, false).then(\r\n        (relationPlanet) => dispatch(relationPlanetLoaded(relationPlanet)), \r\n        (error) => dispatch(relationPlanetError(error.message))\r\n    )\r\n};\r\n\r\nconst getFilmAndRelation = () => (dispatch, getState) => {\r\n    const curState = getState();\r\n    const currentId = curState.filmsPage.currentFilm.id;\r\n    dispatch(getFilm(currentId)).then(() =>{\r\n        const {filmsPage:{currentFilmFull:{film:{planets}}}} = getState();\r\n        if (planets.length > 0 ) {\r\n            return dispatch(getRelationPlanets(planets));\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport const getAllFilms = () => (dispatch, getState) => {\r\n    dispatch(allFilmsRequested());\r\n    apiFilm.fetchAllFilms().then (\r\n        ({allFilms}) => dispatch(allFilmsLoaded(allFilms)), \r\n        (error) => dispatch(allFilmsError(error.message))\r\n    ).then (() => {\r\n        return dispatch(getFilmAndRelation());\r\n    })\r\n}\r\n\r\nexport const setCurrentFilmWithRel = (index) => (dispatch, getState) => {\r\n    if (index === getState().filmsPage.currentFilm.index) {return};\r\n    dispatch(setCurrentFilm(index));\r\n    dispatch(getFilmAndRelation());\r\n}\r\n\r\n\r\nexport const changeCurrentFilmWithRel = (upDown) => (dispatch, getState) => {\r\n    const curIdold = getState().filmsPage.currentFilm.id;\r\n    dispatch(changeCurrentFilm(upDown));\r\n    const curIdnew = getState().filmsPage.currentFilm.id;\r\n    if (curIdold === curIdnew) return;\r\n    dispatch(getFilmAndRelation());\r\n}\r\n","import Row from './row';\n\nexport default Row;\n","import React from 'react';\n\nimport './row.css';\n\nconst Row = ({ left, right }) => {\n  return (\n    <div className=\"row mb2\">\n      <div className=\"col-md-4\">\n        {left}\n      </div>\n      <div className=\"col-md-8\">\n        {right}\n      </div>\n    </div>\n  );\n};\n\n\nexport default Row;\n","import React from 'react';\r\nimport './item-details.css';\r\n\r\nexport const Record = (props) => {\r\n    const {item, field, label} = props;\r\n\r\n    return (\r\n        <li className=\"list-group-item\">\r\n            <span className=\"term\">{label}</span>\r\n            <span>{ item[field] }</span>\r\n        </li> \r\n    );\r\n}\r\n\r\nexport const Details = ({name, item, children}) => {\r\n    return (\r\n        <>\r\n            <div className=\"card-body\">\r\n                    <h4>{name}</h4>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    {\r\n                    React.Children.map(children, (child) => {\r\n                        return React.cloneElement(child, { item });\r\n                    })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst ItemDetails = (props) => {\r\n    const {name, image, item, children} = props;\r\n    if (!item) {\r\n        return <span>Not selected item</span>;\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className=\"item-details card\">\r\n            <img className=\"item-image card-img-top\"\r\n            src={image}\r\n            alt={name}/>\r\n\r\n            <Details name={name} item={item}>\r\n                {children}\r\n            </Details>\r\n        </div> \r\n    )\r\n};\r\n\r\nexport default ItemDetails;\r\n","import ItemDetails, {Record, Details} from './item-details';\r\nexport {Record, Details};\r\nexport default ItemDetails;","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport ItemDetails, {Record}  from '../../item-details';\r\n\r\nconst PlanetDetails= (props) => {\r\n    const {relationPlanet:{planets, currentPlanetIndex}} = props;\r\n    return (\r\n        <ItemDetails name={planets.length?planets[currentPlanetIndex].name:''} \r\n                image={planets.length?planets[currentPlanetIndex].img:''} \r\n                item = {planets[currentPlanetIndex]}\r\n        >\r\n        \r\n            <Record field=\"diameter\" label=\"Diameter: \"/>\r\n            <Record field=\"climate\" label=\"Climate: \"/>\r\n            <Record field=\"terrain\" label=\"Terrain: \"/>\r\n            <Record field=\"population\" label=\"Population: \"/>\r\n            \r\n        </ItemDetails>    \r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({filmsPage:{relationPlanet}}) => {\r\n    return {\r\n        relationPlanet\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(PlanetDetails);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport ItemDetails, {Record}  from '../../item-details';\r\nimport Spinner from '../../spinner';\r\nimport ErrorIndicator from '../../error-indicator';\r\n\r\n\r\nconst PlanetDetails= (props) => {\r\n    const {currentFilmFull:{film, isLoading, isError}} = props;\r\n    if (isLoading) {\r\n        return <Spinner />\r\n    }\r\n    \r\n    if (isError) {\r\n        return <ErrorIndicator error={isError} />\r\n    }\r\n    return (\r\n        <ItemDetails name={film.title} image={film.img} \r\n                item = {film}\r\n        >\r\n        \r\n            <Record field=\"dicription\" label=\"Discription: \"/>\r\n            <Record field=\"director\" label=\"Director film: \"/>\r\n            <Record field=\"producer\" label=\"Producer film: \"/>\r\n            <Record field=\"release\" label=\"Release data: \"/>\r\n            \r\n        </ItemDetails>    \r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({filmsPage:{currentFilmFull}}) => {\r\n    return {\r\n        currentFilmFull\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(PlanetDetails);\r\n","import ItemList from './item-list';\r\nexport default ItemList;","import React from 'react';\r\nimport './item-list.css';\r\n\r\nconst ItemList = ({items, currentIndex, changeCurrentItem, setCurrentItem,\r\n                children: renderLabel}) => {\r\n    \r\n    const viewItems = items.map((item, index) => {\r\n        let classActive = '';\r\n        if (currentIndex === index) {classActive = ' active'}\r\n        return (\r\n            <li className={`list-group-item${classActive}`}  \r\n                key={item.id} \r\n                onClick = {() => {\r\n                    setCurrentItem(index);\r\n                }}\r\n            >\r\n                {renderLabel(item)} {/*! вызывается на каждом эл-те при перевыборе*/}\r\n            </li>\r\n        );\r\n    })\r\n    const keyDown = (e) => {\r\n        e.preventDefault();\r\n        switch (e.key) {\r\n            case 'ArrowUp':\r\n                changeCurrentItem(-1);\r\n                break;\r\n            case 'ArrowDown':\r\n                changeCurrentItem(1);\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n    return (\r\n        <ul className=\"item-list list-group\" tabIndex=\"0\"\r\n            onKeyDown={keyDown}>\r\n            {viewItems}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default ItemList;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../spinner';\r\nimport ErrorIndicator from '../../error-indicator';\r\nimport ItemList from '../../item-list';\r\nimport {setCurrentRelPlanet,\r\n        changeCurrentRelPlanet\r\n    } from '../../../actions/films';\r\n\r\nconst PlanetsList = (props) => {\r\n    const {relationPlanet:{isLoading, isError, planets, currentPlanetIndex}, \r\n            currentFilmFull:{film:{title}}, setCurrentRelPlanet, changeCurrentRelPlanet } = props;\r\n    if (isLoading) {\r\n        return <Spinner />\r\n    }\r\n    \r\n    if (isError) {\r\n        return <ErrorIndicator error={isError} />\r\n    }\r\n    \r\n    return (\r\n        <div className=\"list-item\">\r\n            <div> Plannets in film: \"{title}\" </div>\r\n            <ItemList items={planets} currentIndex={currentPlanetIndex}\r\n                changeCurrentItem={changeCurrentRelPlanet} setCurrentItem={setCurrentRelPlanet}\r\n            > \r\n                {renderName}\r\n            </ItemList>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst renderName = ({name}) => {\r\n    return <span> {name} </span>\r\n};\r\n\r\nconst mapStateToProps = ({filmsPage:{relationPlanet, currentFilmFull}}) => {\r\n    return {\r\n        currentFilmFull,\r\n        relationPlanet\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    setCurrentRelPlanet,\r\n    changeCurrentRelPlanet\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlanetsList)\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ItemList from '../../item-list';\r\nimport {setCurrentFilmWithRel,\r\n    changeCurrentFilmWithRel,\r\n    } from '../../../actions/films';\r\n\r\nconst FilmsList = (props) => {\r\n    const {films, currentFilm, setCurrentFilmWithRel, changeCurrentFilmWithRel } = props;\r\n    \r\n    return (\r\n        <div className=\"list-item\">\r\n            <div> Films of STARS WAR </div>\r\n            <ItemList items={films} currentIndex={currentFilm.index}\r\n                changeCurrentItem={changeCurrentFilmWithRel} setCurrentItem={setCurrentFilmWithRel}\r\n            > \r\n                {renderTitle}\r\n            </ItemList>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst renderTitle = ({title}) => {\r\n    return <span> {title} </span>\r\n};\r\n\r\nconst mapStateToProps = ({filmsPage:{films, currentFilm}}) => {\r\n    return {\r\n        films,\r\n        currentFilm,\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    setCurrentFilmWithRel,\r\n    changeCurrentFilmWithRel,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilmsList)\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator';\r\nimport {getAllFilms} from '../../actions/films';\r\nimport Row from '../row';\r\nimport PlanetDetails from './films-page-componets/planet-details';\r\nimport FilmDetails from './films-page-componets/film-details'\r\nimport PlanetsList from './films-page-componets/planets-list';\r\nimport FilmsList from './films-page-componets/films-list';\r\nimport './films-page.css';\r\n\r\nclass FilmsPage extends Component {\r\n    \r\n    componentDidMount = () => {\r\n        this.props.getAllFilms();    \r\n    }\r\n        \r\n    render() {\r\n        const {isLoading, isError} = this.props;\r\n\r\n        if (isLoading) {\r\n            return <Spinner />\r\n        }\r\n        \r\n        if (isError) {\r\n            return <ErrorIndicator error={isError} />\r\n        }\r\n        return (\r\n            <>\r\n                <Row \r\n                    left={<FilmsList />} \r\n                    right={<FilmDetails />}\r\n                />\r\n                <Row \r\n                    left={<PlanetsList />} \r\n                    right={<PlanetDetails />}\r\n                />\r\n            </>\r\n        )\r\n    };\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = ({filmsPage:{isLoading, isError}}) => {\r\n    return {\r\n        isLoading,\r\n        isError,\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    getAllFilms,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilmsPage);\r\n","import characterApi from '../services/character-servise'\r\n\r\nconst FETCH_ALL_CHARACTERS_REQUEST = 'FETCH_ALL_CHARACTERS_REQUEST';\r\nconst FETCH_ALL_CHARACTERS_SUCCESS = 'FETCH_ALL_CHARACTERS_SUCCESS';\r\nconst FETCH_ALL_CHARACTERS_FAILURE = 'FETCH_ALL_CHARACTERS_FAILURE';\r\nconst SET_SERVER_SEARCH_CHARACTERS = 'SET_SERVER_SEARCH_CHARACTERS';\r\nconst SET_CURRENT_PAGE_CHARACTERS = 'SET_CURRENT_PAGE_CHARACTERS';\r\n\r\nconst api = new characterApi();\r\nconst allCharactersRequested = () => {\r\n    return {type: FETCH_ALL_CHARACTERS_REQUEST }\r\n};\r\nconst allCharactersLoaded = (allCharacters) => {\r\n    return {\r\n        type: FETCH_ALL_CHARACTERS_SUCCESS,\r\n        payload: allCharacters\r\n    }\r\n};\r\nconst allCharactersError = (error) => {\r\n    return {\r\n        type: FETCH_ALL_CHARACTERS_FAILURE,\r\n        payload:error\r\n    }\r\n};\r\nconst setCurrentPage = (page) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE_CHARACTERS,\r\n        payload:page\r\n    }\r\n};\r\n\r\nexport const setServerSearch = (serverSearch) => {\r\n    return {\r\n        type: SET_SERVER_SEARCH_CHARACTERS,\r\n        payload: serverSearch\r\n    }\r\n};\r\n\r\nexport const getAllCharacters = (page=1) => (dispatch, getState) => {\r\n    dispatch(allCharactersRequested());\r\n    const search = getState().charactersPage.serverSearch\r\n    return api.fetchSearchCharacter(search, page, false).then ( (data) =>{\r\n        dispatch(allCharactersLoaded(data));\r\n        dispatch(setCurrentPage(page))\r\n    }).catch (error => {\r\n        dispatch(allCharactersError(error.message))\r\n    });\r\n}\r\n\r\n// export const getAllSearchCharacters = (page=1) => (dispatch, getState) => {\r\n//     dispatch(allCharactersRequested());\r\n//     const search = getState().charactersPage.serverSearch\r\n//     console.log(`from getAllSearchCharacters =${search}`)\r\n//     return api.fetchSearchCharacter(search, page, false).then ( (data) =>{\r\n//         dispatch(allCharactersLoaded(data));\r\n//     }).catch (error => {\r\n//         dispatch(allCharactersError(error.message))\r\n//     });\r\n// }\r\n","import baseSWApiService from './base-swapi-service';\r\n\r\nexport default class charactersApi extends baseSWApiService {\r\n    _subApiUrl= '/people/';\r\n    _subImgUrl = '/characters/';\r\n    \r\n    _transformData = (character) => {\r\n        const id = this._extractId(character.url); \r\n        const newCharacter = {\r\n            id:this._extractId(character.url),\r\n            img: this.fetchImgCharacter(id),\r\n            name: character.name,\r\n            gender: character.gender,\r\n            height: character.height,\r\n            mass: character.mass,\r\n            birthYear: character.birth_year,\r\n            homeworld: this._extractId(character.homeworld),\r\n            films: character.films.map((e) => {\r\n                    return this._extractId(e);\r\n            }),\r\n        }\r\n        return newCharacter;\r\n    }\r\n    \r\n    _transformDataShort = (character) => {\r\n        const id = this._extractId(character.url); \r\n        const newCharacter = {\r\n            id:this._extractId(character.url),\r\n            img: this.fetchImgCharacter(id),\r\n            name: character.name\r\n        }\r\n        return newCharacter;\r\n    }\r\n\r\n    _helperTransform = (data, short) => {\r\n        const arr = data.results;\r\n        const fn = short?this._transformDataShort:this._transformData;\r\n        return {\r\n            allCharacters:arr.map(fn),\r\n            totalCharacters:data.count\r\n            }\r\n\r\n    }\r\n\r\n    fetchAllCharacters = async (page = 1, short = true) => {\r\n        let url = this._subApiUrl;\r\n        if (page > 1) {\r\n            url+=`?page=${page}`;\r\n        }\r\n        const data= await this._getResurse(url);\r\n        // const arr = data.results;\r\n        // const fn = short?this._transformDataShort:this._transformData;\r\n        // return {\r\n        //     allCharacters:arr.map(fn),\r\n        //     tottalCharacters:data.count\r\n        //     }\r\n        return this._helperTransform (data, short);\r\n    }\r\n    \r\n    fetchCharacterById = async (id, short = false) => {\r\n        const charater = await this._getResurse(`${this._subApiUrl}${id}/`);\r\n        if (short) {return this._transformDataShort(charater);}\r\n        return this._transformData(charater);\r\n    }\r\n\r\n    fetchImgCharacter = (id) => {\r\n        return `${this._imageBase}${this._subImgUrl}${id}.jpg`;\r\n    }\r\n\r\n    fetchCharactersByArrayId = async (array, short=true) =>{\r\n        const result = await Promise.all(array.map(e => this.fetchCharacterById(e, short)));\r\n        return result;\r\n    }\r\n\r\n    fetchSearchCharacter = async (searchName = '',page=1 , short = true) => {\r\n        let url = this._subApiUrl;\r\n        url+=`?search=${searchName}&page=${page}`;\r\n        // console.log(`from service=${url}`)\r\n        const data= await this._getResurse(url);\r\n        // const arr = data.results;\r\n        // const fn = short?this._transformDataShort:this._transformData;\r\n        // return {\r\n        //     allCharacters:arr.map(fn),\r\n        //     tottalCharacters:data.count\r\n        //     }\r\n        return this._helperTransform (data, short);\r\n    }\r\n}","import SortPanel from './sort-panel'\r\nexport default SortPanel;","import React from 'react'\r\n\r\nimport './sort-panel.css'\r\n\r\n// const filterButtons = [\r\n//     { name: '', label: 'Без сортировки' },\r\n//     { name: 'name', label: 'Имени' },\r\n//     { name: 'height', label: 'Росту' },\r\n//     { name: 'mass', label: 'Массе' }\r\n//   ];\r\n\r\n\r\nconst SortPanel = ({arraySortBy, sortBy, onSortByChange = () =>{}}) => {\r\n\r\n    const buttons = arraySortBy.map(({name, label}) => {\r\n      const isActive = name === sortBy;\r\n      const classNames = 'btn ' + (isActive ? 'btn-info' : 'btn-outline-secondary'); \r\n      return (\r\n              \r\n        <button key={name}\r\n                type=\"button\"\r\n                onClick={() => onSortByChange(name)}\r\n                className={classNames}>{label}</button>\r\n      );\r\n    });\r\n    \r\n    return (\r\n    <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n        <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" >Сортировать по </span>\r\n        </div>\r\n        {buttons}\r\n    </div>  \r\n    )\r\n}\r\n\r\nexport default SortPanel;","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport SortPanel from '../../sort-panel';\r\nimport {setSortBy} from '../../../actions/filter-characters';\r\n\r\nconst CharacterSortPanel = (props) => {\r\n    \r\n    const arreySortBy = [\r\n        { name: '', label: 'Без сортировки' },\r\n        { name: 'name', label: 'Имени' },\r\n        { name: 'height', label: 'Росту' },\r\n        { name: 'mass', label: 'Массе' }\r\n      ];\r\n\r\n    const {sortBy, setSortBy} = props;\r\n\r\n    return (\r\n            <SortPanel arraySortBy={arreySortBy}\r\n                    sortBy={sortBy}\r\n                    onSortByChange={setSortBy}\r\n            />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({filterCharacters:{sortBy}}) => {\r\n    return {\r\n        sortBy\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    setSortBy,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CharacterSortPanel); ","const SET_SORT_BY_CHARACTERS = 'SET_SORT_BY_CHARACTERS';\r\nconst SET_INNER_SEARCH_CHARACTERS = 'SET_INNER_SEARCH_CHARACTERS';\r\n\r\nexport const setSortBy = (sortBy) => {\r\n    return {\r\n        type: SET_SORT_BY_CHARACTERS,\r\n        payload: sortBy\r\n    }\r\n};\r\n\r\nexport const setInnerSearch = (innetSearch) => {\r\n    return {\r\n        type: SET_INNER_SEARCH_CHARACTERS,\r\n        payload: innetSearch\r\n    }\r\n};\r\n","import Card3d from './card-3d';\r\nexport default Card3d;","import React from 'react';\r\nimport './card-3d.css';\r\n\r\nconst Card3d = ({ front, back }) => {\r\n    return (\r\n       \r\n            <div className=\"card3d\">\r\n                <div className=\"front\">\r\n                    {front}\r\n                </div>\r\n                <div className=\"back\">\r\n                    {back}\r\n                </div>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Card3d;","import CardItem from './card-item';\r\nexport default CardItem;","import React from 'react';\r\nimport {Record, Details} from '../item-details';\r\nimport Card3d from '../card-3d';\r\n\r\nimport  './card-item.css'\r\n\r\nconst  CardItem = ({item, mapFields}) => {\r\n    const fields = mapFields.map((item) =>{\r\n        return (\r\n            <Record field={item.field} label={item.label} key={item.field}/>\r\n        )\r\n    })\r\n\r\n    const front = (\r\n        <img src={item.img} alt={item.name}/>\r\n    );\r\n    const back = (\r\n        <Details name={item.name} \r\n                item = {item}\r\n        >\r\n            {fields}\r\n        </Details>\r\n    );\r\n    return (\r\n        <div className=\"card-item\">\r\n            <Card3d front={front} back={back} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardItem;","import GridCards from './grid-cards';\r\nexport default GridCards;","import React from 'react';\r\nimport CardItem from '../card-item';\r\n\r\nconst GridCards = ({items, mapFields}) => {\r\n\r\n    const grid = items.map( item => {\r\n        return (\r\n            <CardItem item={item} mapFields={mapFields} key={item.id} />\r\n        );\r\n    })\r\n    return (\r\n        <div className=\"row align-items-start\">\r\n            {grid}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GridCards;","import React from 'react';\r\nimport GridCards from '../../grid-cards';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapFields = [\r\n    {field:\"gender\", label:\"Gender: \"},\r\n    {field:\"birthYear\", label:\"birth Year: \"},\r\n    {field:\"height\", label:\"Height: \"},\r\n    {field:\"mass\", label:\"Mass: \"},\r\n]\r\n\r\nconst compareName = (a, b) => {\r\n    if (a.name < b.name) return -1;\r\n    if (a.name > b.name) return 1;\r\n    return 0;\r\n};\r\n\r\nconst myParseInt = (x) => {\r\n    x = parseInt(x);\r\n    if (isNaN(x)) return 0;\r\n    return x\r\n}\r\n\r\nconst compareNum = (a, b) => a-b\r\n\r\nconst compareMass = (a, b) => {\r\n    a = myParseInt(a.mass);\r\n    b = myParseInt(b.mass);\r\n    return compareNum(a, b);\r\n};\r\n\r\nconst compareHeight = (a, b) => {\r\n    a = myParseInt(a.height);\r\n    b = myParseInt(b.height);\r\n    return compareNum(a, b);\r\n};\r\n\r\nconst innerSearch = (array, search) => {\r\n    if (search.length === 0) {\r\n        return array;\r\n    } \r\n    return array.filter((array) => {\r\n        return array.name.toLowerCase().indexOf(search.toLowerCase()) > -1;\r\n    }); \r\n}\r\n\r\nconst filter = (array, field, search) => {\r\n    return sort( innerSearch(array, search), field);\r\n}\r\n\r\nconst sort = (array, field) => {\r\n    const newArray = [...array];\r\n    switch (field) {\r\n        case 'name':\r\n            return newArray.sort(compareName);\r\n        case 'mass':\r\n            return newArray.sort(compareMass);\r\n        case 'height':\r\n            return newArray.sort(compareHeight);\r\n        case '':\r\n        default:\r\n            return array;\r\n    }\r\n}\r\n\r\nconst CharactersGrid = (props) => {\r\n    const {characters} = props;\r\n    return (\r\n        <div className=\"\">\r\n            <GridCards items={characters} mapFields={mapFields}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({charactersPage:{characters}, filterCharacters:{sortBy, innerSearch}}) => {\r\n    return {\r\n        characters: filter(characters, sortBy, innerSearch),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CharactersGrid);","import SearchInput from './search-input'\r\nexport default SearchInput;","import React from 'react'\r\n\r\nimport './search-input.css'\r\n\r\n\r\nconst SearchInput = ({search, title, onChangeSearch = () =>{}}) => {\r\n    const onChange = (e) => {\r\n        onChangeSearch(e.target.value);\r\n    }\r\n    \r\n    return (\r\n\r\n        <input className=\"form-control\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"\r\n                value={search} onChange={onChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchInput;\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\n// import SearchPanel from '../../search-panel';\r\nimport SearchInput from '../../search-input';\r\nimport {setInnerSearch} from '../../../actions/filter-characters';\r\n\r\nconst CharacterInnerSearchPanel = (props) => {\r\n    \r\n    const {innerSearch, setInnerSearch} = props;\r\n\r\n    return (\r\n        <div className=\"input-group\">\r\n            <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\">На странице</span>\r\n            </div>\r\n            <SearchInput search={innerSearch}\r\n                    onChangeSearch={setInnerSearch}\r\n            />    \r\n        </div>\r\n\r\n            \r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({filterCharacters:{innerSearch}}) => {\r\n    return {\r\n        innerSearch\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    setInnerSearch,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CharacterInnerSearchPanel); ","import SearchPanel from './search-panel'\r\nexport default SearchPanel;","import React from 'react'\r\nimport SearchInput from '../search-input'\r\n\r\nimport './search-panel.css'\r\n\r\n\r\nconst SearchPanel = ({search, title, onChangeSearch = () =>{} , onSubmitSearch=() =>{} }) => {\r\n// TODO решить с onSubmit на форме! \r\n// Почему получаем 'Form submission canceled because the form is not connected'\r\n    \r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onSubmitSearch();\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"input-group\">\r\n            <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\">{title}</span>\r\n            </div>\r\n            <form className=\"form-inline\" onSubmit={(e) => {onSubmit(e)}}>\r\n                <SearchInput search={search}\r\n                        onChangeSearch={onChangeSearch}\r\n                />    \r\n                <button className=\"btn btn-outline-success\" type=\"submit\" >\r\n                    <i className=\"fa fa-search\"></i>\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPanel;","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport SearchPanel from '../../search-panel';\r\nimport {setServerSearch, getAllCharacters} from '../../../actions/characters';\r\n\r\nconst CharacterServerSearchPanel = (props) => {\r\n    \r\n    const {serverSearch, setServerSearch, getAllCharacters} = props;\r\n\r\n    return (\r\n            <SearchPanel search={serverSearch}\r\n                    onChangeSearch={setServerSearch}\r\n                    onSubmitSearch={getAllCharacters}\r\n                    title=\"На сервере\"\r\n            />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({charactersPage:{serverSearch}}) => {\r\n    return {\r\n        serverSearch\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    getAllCharacters,\r\n    setServerSearch\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CharacterServerSearchPanel); ","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport  './pagination.css'\r\n// TODO вынести в отдельный компонет?!\r\nconst  PaginationLink = ({total, currentPage, baseRefUrl, search}) => {\r\n    console.log(`from PaginationLink total=${total} currentPage=${currentPage} base=${baseRefUrl}`)\r\n    \r\n\r\n    \r\n    const count = Math.ceil(total/10); // perPage is const in api and =10\r\n    const arrButtons = Array.from({ length: count }, (v, i) => i+1);\r\n    const curPage = parseInt(currentPage);\r\n    let prev, next;\r\n    if (curPage===1) {\r\n        prev = (\r\n            <li className=\"page-item disabled\" >\r\n                <Link to={`${baseRefUrl}1/${search}`} className=\"page-link\" tabIndex=\"-1\" aria-disabled=\"true\">Previous</Link>\r\n            </li>\r\n        ); \r\n    } else {\r\n        prev = (\r\n            <li className=\"page-item\">\r\n                <Link to={`${baseRefUrl}${curPage-1}/${search}`} className=\"page-link\">Previous</Link>\r\n            </li>\r\n        );         \r\n    }\r\n    if (curPage===count) {\r\n        next = (\r\n            <li className=\"page-item disabled\">\r\n                <Link to={`${baseRefUrl}${count}/${search}`} className=\"page-link\" tabIndex=\"-1\" aria-disabled=\"true\">Next</Link>\r\n            </li>\r\n        );    \r\n    } else {\r\n        next = (\r\n            <li className=\"page-item\">\r\n                <Link to={`${baseRefUrl}${curPage+1}/${search}`} className=\"page-link\">Next</Link>\r\n            </li>\r\n        );        \r\n    }\r\n    \r\n    const pageButtons = arrButtons.map((item) => {\r\n        let classActive = '';\r\n        if (+item === +curPage) {\r\n            classActive = ' active'\r\n        };\r\n        return (\r\n            \r\n            <li className={`page-item${classActive}` } key={item}><Link to={`${baseRefUrl}${item}/${search}`} className=\"page-link\">{item}</Link></li>\r\n        );\r\n    })\r\n\r\n    return (\r\n        <nav aria-label=\"Page navigation example\">\r\n            <ul className=\"pagination justify-content-center\">\r\n                {prev}\r\n                {pageButtons}\r\n                {next}\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default PaginationLink;","import Pagination from './pagination';\r\nimport PaginationLink from './paginationLink'\r\n\r\nexport {PaginationLink};\r\nexport default Pagination;","import React from 'react';\r\n\r\nimport  './pagination.css'\r\n\r\nconst  Pagination = ({total, currentPage, getData}) => {\r\n\r\n    const count = Math.ceil(total/10); // perPage is const in api and =10\r\n    const prevClick= () => {\r\n        if (currentPage === 1) {return}\r\n        getData(currentPage-1);\r\n    } \r\n    const nextClick = () => {\r\n        if (currentPage === count) {return}\r\n        getData(currentPage+1);\r\n    }\r\n    let prev, next;\r\n    if (currentPage===1) {\r\n        prev = (\r\n            <button \r\n            type=\"button\"\r\n            onClick={prevClick}\r\n            className=\"btn btn-outline-secondary disabled\">\r\n                    prev\r\n            </button>\r\n        ); \r\n    } else {\r\n        prev = (\r\n            <button \r\n            type=\"button\"\r\n            onClick={prevClick}\r\n            className=\"btn btn-outline-secondary\">\r\n                    prev\r\n            </button>\r\n        ); \r\n    }\r\n    if (currentPage === count) {\r\n        next = (\r\n            <button \r\n            type=\"button\"\r\n            onClick={nextClick}\r\n            className=\"btn btn-outline-secondary disabled\">\r\n                    next\r\n            </button>\r\n         );\r\n    } else {\r\n        next = (\r\n            <button \r\n            type=\"button\"\r\n            onClick={nextClick}\r\n            className=\"btn btn-outline-secondary\">\r\n                    next\r\n            </button>\r\n        );    \r\n    }\r\n    \r\n    const arrButtons = Array.from({ length: count }, (v, i) => i+1);\r\n    const pageButtons = arrButtons.map((item) => {\r\n    const isActive = +item === +currentPage;\r\n        const classNames = 'btn ' + (isActive ? 'btn-info' : 'btn-outline-secondary'); \r\n        return (\r\n                \r\n          <button key={item}\r\n                  type=\"button\"\r\n                  onClick={() => getData(item)}\r\n                  className={classNames}>{item}</button>\r\n        );\r\n    })\r\n\r\n    return (\r\n        <div className=\"btn-group\">\r\n            {prev}\r\n            <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n                {pageButtons}\r\n            </div> \r\n            {next}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination;","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {getAllCharacters} from '../../../actions/characters'\r\nimport Pagination from '../../paginetion';\r\n\r\n\r\nconst  CharactersPagination = ({total, currentPage, getAllCharacters}) => {\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            <Pagination total={total}\r\n                        currentPage={currentPage}\r\n                        getData={getAllCharacters}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({charactersPage:{total, currentPage}}) => {\r\n    return {\r\n        total,\r\n        currentPage\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    getAllCharacters,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CharactersPagination);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator';\r\nimport {getAllCharacters} from '../../actions/characters';\r\nimport CharacterSortPanel from './characters-page-component/character-sort-panel';\r\nimport CharactersGrid from './characters-page-component/character-grid';\r\nimport CharacterInnerSearchPanel from './characters-page-component/character-inner-search-panel'\r\nimport CharacterServerSearchPanel from './characters-page-component/character-server-search-panel'\r\nimport CharacterPagination from './characters-page-component/character-pagination';\r\n\r\nimport './characters-page.css';\r\n\r\nclass CharactersPage extends Component {\r\n    // 1. Почему происходит 2 раза обновление??? Разобраться. \r\n    //  Видно по componentDidUpdate или shouldComponentUpdate\r\n    //  Это при вызове Spiner-a!!!???\r\n    \r\n    // 2. Возможно ли(по практикам) сделать запрос на получение данных в shouldComponentUpdate???\r\n    componentDidMount = () => {\r\n        this.props.getAllCharacters();\r\n    }\r\n    // С shouldComponentUpdate перестает работать Spiner!!!\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     console.log(`From shouldComponentUpdatenextProps.Page=${nextProps.page}`)\r\n    //     if (nextProps.page === this.props.page) {\r\n    //         console.log(`пропускаем`);\r\n    //         return  false;\r\n    //     };\r\n    //     return true;\r\n    // }\r\n\r\n    render() {\r\n        const {isLoading, isError} = this.props;\r\n\r\n        if (isLoading) {\r\n            return <Spinner />\r\n        }\r\n        \r\n        if (isError) {\r\n            return <ErrorIndicator error={isError} />\r\n        }\r\n\r\n        return (\r\n\r\n            <div>\r\n                <div className=\"btn-toolbar justify-content-between\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                    <CharacterSortPanel />\r\n                    <CharacterInnerSearchPanel />\r\n                    <CharacterServerSearchPanel />\r\n                </div>\r\n                <CharactersGrid />\r\n                <CharacterPagination />\r\n            </div>\r\n        )\r\n    };\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = ({charactersPage:{isLoading, isError, characters}}) => {\r\n    return {\r\n        isLoading,\r\n        isError,\r\n        characters\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    getAllCharacters,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CharactersPage);","import React from 'react';\r\n\r\nconst PlanetsPage = () => {\r\n    return (\r\n        <div>\r\n            <h3> Тут будет странича планет!!! </h3>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default PlanetsPage;\r\n","import starshipApi from '../services/starship-servise'\r\n\r\nconst FETCH_ALL_STARSHIPS_REQUEST = 'FETCH_ALL_STARSHIPS_REQUEST';\r\nconst FETCH_ALL_STARSHIPS_SUCCESS = 'FETCH_ALL_STARSHIPS_SUCCESS';\r\nconst FETCH_ALL_STARSHIPS_FAILURE = 'FETCH_ALL_STARSHIPS_FAILURE';\r\nconst SET_SERVER_SEARCH_STARSHIPS = 'SET_SERVER_SEARCH_STARSHIPS';\r\n// const SET_CURRENT_PAGE_STARSHIPS = 'SET_CURRENT_PAGE_STARSHIPS';\r\n\r\nconst api = new starshipApi();\r\nconst allStarshipsRequested = () => {\r\n    return {type: FETCH_ALL_STARSHIPS_REQUEST }\r\n};\r\nconst allStarshipsLoaded = (allStarships) => {\r\n    return {\r\n        type: FETCH_ALL_STARSHIPS_SUCCESS,\r\n        payload: allStarships\r\n    }\r\n};\r\nconst allStarshipsError = (error) => {\r\n    return {\r\n        type: FETCH_ALL_STARSHIPS_FAILURE,\r\n        payload:error\r\n    }\r\n};\r\n// const setCurrentPage = (page) => {\r\n//     return {\r\n//         type: SET_CURRENT_PAGE_STARSHIPS,\r\n//         payload:page\r\n//     }\r\n// };\r\n\r\nexport const setServerSearch = (serverSearch) => {\r\n    return {\r\n        type: SET_SERVER_SEARCH_STARSHIPS,\r\n        payload: serverSearch\r\n    }\r\n};\r\n\r\nexport const getAllStarships = (page=1) => (dispatch, getState) => {\r\n    dispatch(allStarshipsRequested());\r\n    const search = getState().starshipsPage.serverSearch\r\n    return api.fetchSearchStarship(search, page, false).then ( (data) =>{\r\n        dispatch(allStarshipsLoaded(data));\r\n        // dispatch(setCurrentPage(page))\r\n    }).catch (error => {\r\n        dispatch(allStarshipsError(error.message))\r\n    });\r\n}\r\n","import baseSWApiService from './base-swapi-service';\r\n\r\nexport default class starshipsApi extends baseSWApiService {\r\n    _subApiUrl= '/starships/';\r\n    _subImgUrl = '/starships/';\r\n    \r\n    _transformData = (starship) => {\r\n        const id = this._extractId(starship.url); \r\n        const newStarship = {\r\n            id:id,\r\n            img: this.fetchImgStarship(id),\r\n            name: starship.name,\r\n            model: starship.model,\r\n            cost: starship.cost_in_credits,\r\n            crew: starship.crew,\r\n            manufacturer: starship.manufacturer,\r\n            films: starship.films.map((e) => {\r\n                return this._extractId(e);\r\n        }),\r\n        }\r\n        return newStarship;\r\n    }\r\n    \r\n    _transformDataShort = (starship) => {\r\n        const id = this._extractId(starship.url); \r\n        const newStarship = {\r\n            id:id,\r\n            img: this.fetchImgStarship(id),\r\n            name: starship.name\r\n        }\r\n        return newStarship;\r\n    }\r\n\r\n    _helperTransform = (data, short) => {\r\n        const arr = data.results;\r\n        const fn = short?this._transformDataShort:this._transformData;\r\n        return {\r\n            allStarships:arr.map(fn),\r\n            totalStarships:data.count\r\n            }\r\n\r\n    }\r\n\r\n    fetchAllStarships = async (page = 1, short = true) => {\r\n        // debugger;\r\n        let url = this._subApiUrl;\r\n        if (page > 1) {\r\n            url+=`?page=${page}`;\r\n        }\r\n        const data= await this._getResurse(url);\r\n        return this._helperTransform (data, short);\r\n    }\r\n    \r\n    fetchStarshipById = async (id, short = false) => {\r\n        const starship = await this._getResurse(`${this._subApiUrl}${id}/`);\r\n        if (short) {return this._transformDataShort(starship);}\r\n        return this._transformData(starship);\r\n    }\r\n\r\n    fetchImgStarship = (id) => {\r\n        return `${this._imageBase}${this._subImgUrl}${id}.jpg`;\r\n    }\r\n\r\n    fetchStarshipByArrayId = async (array, short=true) =>{\r\n        const result = await Promise.all(array.map(e => this.fetchStarshipById(e, short)));\r\n        return result;\r\n    }\r\n\r\n    fetchSearchStarship = async (searchName = '', page=1 , short = true) => {\r\n        console.log(`from fetchSearchStarship short=${short}`)\r\n        let url = this._subApiUrl;\r\n        url+=`?search=${searchName}&page=${page}`;\r\n        const data= await this._getResurse(url);\r\n        console.log(`from fetchSearchStarship data=${data}`)\r\n        return this._helperTransform (data, short);\r\n    }\r\n}","import React from 'react';\r\nimport GridCards from '../../grid-cards';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapFields = [\r\n    {field:\"model\", label:\"Model: \"},\r\n    {field:\"cost\", label:\"Cost: \"},\r\n    {field:\"crew\", label:\"Crew: \"},\r\n    {field:\"manufacturer\", label:\"Manufacturer: \"},\r\n]\r\n\r\n\r\nconst StarshipsGrid = (props) => {\r\n    const {starships} = props;\r\n    return (\r\n        <div className=\"\">\r\n            <GridCards items={starships} mapFields={mapFields}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({starshipsPage:{starships}}) => {\r\n    return {\r\n        starships: starships\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(StarshipsGrid);","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {PaginationLink} from '../../paginetion';\r\n\r\n\r\nconst  StarshipsPagination = ({total, currentPage, search}) => {\r\n    console.log(`frpm StarshipPagination total=${total} currentPage=${currentPage}`)\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            <PaginationLink total={total}\r\n                        currentPage={currentPage}\r\n                        baseRefUrl=\"/starships/\"\r\n                        search={search}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({starshipsPage:{total}}) => {\r\n    return {\r\n        total\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(StarshipsPagination);\r\n","import React from 'react'\r\nimport {compose} from 'redux'\r\nimport { connect } from 'react-redux';\r\nimport SearchPanel from '../../search-panel';\r\nimport {setServerSearch} from '../../../actions/starships';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst StarshipServerSearchPanel = (props) => {\r\n    \r\n    const {serverSearch, setServerSearch, history} = props;\r\n    \r\n    const redirectToSearch = (history, serverSearch) => { \r\n        return () => {\r\n            const searchString = `/starships/1/${serverSearch}`;\r\n            history.push(searchString);\r\n        }\r\n    }\r\n\r\n    return (\r\n            <SearchPanel search={serverSearch}\r\n                    onChangeSearch={setServerSearch}\r\n                    onSubmitSearch={redirectToSearch(history, serverSearch)}\r\n                    title=\"На сервере\"\r\n            />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({starshipsPage:{serverSearch}}) => {\r\n    return {\r\n         serverSearch\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    setServerSearch\r\n};\r\n\r\nexport default compose(withRouter, connect(mapStateToProps, mapDispatchToProps))(StarshipServerSearchPanel); ","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator';\r\nimport {getAllStarships, setServerSearch} from '../../actions/starships';\r\nimport StarshipsGrid from './starships-page-component/starship-grid';\r\nimport StarshipPagination from './starships-page-component/starship-pagination';\r\nimport StarshipServerSearchPanel from './starships-page-component/starhip-server-search-panel'\r\n\r\n// import './starships-page.css';\r\n\r\nclass StarshipsPage extends Component {\r\n    // 1. Почему происходит 2 раза обновление??? Разобраться. \r\n    //  Видно по componentDidUpdate или shouldComponentUpdate\r\n    //  Это при вызове Spiner-a!!!???\r\n    \r\n    // 2. Возможно ли(по практикам) сделать запрос на получение данных в shouldComponentUpdate???\r\n    componentDidMount = () => {\r\n        const search = this.props.search ? this.props.search:'';\r\n        console.log('from didmount', search);\r\n        this.props.setServerSearch(search);\r\n        this.props.getAllStarships(this.props.page);\r\n    }\r\n    \r\n    componentDidUpdate= (prevProps, prevState, snapshot) => {\r\n        const search = this.props.search ? this.props.search:'';\r\n        if ((prevProps.page !== this.props.page) || (prevProps.search !== this.props.search)) {\r\n            this.props.setServerSearch(search);\r\n            this.props.getAllStarships(this.props.page);\r\n        }\r\n    }\r\n\r\n    // С shouldComponentUpdate перестает работать Spiner!!!\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     console.log(`From shouldComponentUpdatenextProps.Page=${nextProps.page}`)\r\n    //     if (nextProps.page === this.props.page) {\r\n    //         console.log(`пропускаем`);\r\n    //         return  false;\r\n    //     };\r\n    //     return true;\r\n\r\n    // }\r\n\r\n    render() {\r\n        const {isLoading, isError, page, search } = this.props;\r\n        if (isLoading) {\r\n            return <Spinner />\r\n        }\r\n        \r\n        if (isError) {\r\n            return <ErrorIndicator error={isError} />\r\n        }\r\n\r\n        const searchIn = search ? search:'';\r\n        return (\r\n            <div>\r\n                <div className=\"btn-toolbar justify-content-between\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                    <StarshipServerSearchPanel  search={searchIn}/>\r\n                </div>\r\n                <StarshipsGrid />\r\n                <StarshipPagination currentPage={page} search={searchIn}/>\r\n            </div>\r\n        )\r\n    };\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = ({starshipsPage:{isLoading, isError, starships}}) => {\r\n    return {\r\n        isLoading,\r\n        isError,\r\n        starships\r\n    };\r\n};\r\nconst mapDispatchToProps = {\r\n    getAllStarships,\r\n    setServerSearch\r\n\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StarshipsPage);\r\n","import React from 'react';\nimport './app.css';\nimport Header from '../header';\nimport {Route, Switch} from 'react-router-dom';\nimport {FilmsPage, CharactersPage, PlanetsPage, StarshipsPage, HomePage} from '../pages'\n\nfunction App() {\n\n  return (\n    <main className=\"app\">\n      <Header />\n      <Switch>\n        <Route path=\"/\" component={HomePage} exact/>\n        <Route path=\"/films\" component={FilmsPage} />\n        <Route path=\"/characters\" component={CharactersPage} />\n        <Route path=\"/starships/:page/:search?\" \n              render={({match})=>{\n                // console.log('fromApp match=', match)\n                // console.log('fromApp location=', location)\n                const {page, search} = match.params;\n              return <StarshipsPage page={page} search={search}/>}} />\n        <Route path=\"/planets\" component={PlanetsPage} />\n        <Route render={() => <h2>Page not found</h2>} /> \n      </Switch>\n    </main>\n\n  );\n}\nexport default App;\n","import App from './app';\r\nexport default App;","\r\nconst initialState = {\r\n    characters:[],\r\n    total:0,\r\n    currentPage:1,\r\n    serverSearch:'',\r\n    isLoading: false,\r\n    isError: null,\r\n}\r\n\r\nconst charactersPage = (state = initialState, action ) =>{\r\n    switch (action.type) {\r\n        case 'FETCH_ALL_CHARACTERS_REQUEST':\r\n            return {\r\n                ...state,\r\n                characters:[],\r\n                isLoading: true,\r\n                isError: null\r\n            };\r\n        case 'FETCH_ALL_CHARACTERS_SUCCESS':\r\n            return {\r\n                ...state,\r\n                characters: action.payload.allCharacters,\r\n                total: action.payload.totalCharacters,\r\n                isLoading: false,\r\n                isError: null\r\n            };\r\n        case 'FETCH_ALL_CHARACTERS_FAILURE':\r\n            return {\r\n                ...state,\r\n                characters:[],\r\n                isLoading:false,\r\n                isError: action.payload\r\n            };\r\n        case 'SET_SERVER_SEARCH_CHARACTERS':\r\n            return {\r\n                ...state,\r\n                serverSearch: action.payload,\r\n             };\r\n        case 'SET_CURRENT_PAGE_CHARACTERS':\r\n            return {\r\n                ...state,\r\n                currentPage: action.payload,\r\n            };\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default charactersPage;","\r\nconst initialState = {\r\n    films:[],\r\n    total:0,\r\n    currentPage:1,\r\n    currentFilm:{\r\n        id:null,\r\n        index:0,\r\n    },\r\n    currentFilmFull:{\r\n        film:{},\r\n        isLoading:false,\r\n        isError:null\r\n    },\r\n    relationPlanet:{\r\n        planets:[],\r\n        isLoading:false,\r\n        isError:null,\r\n        currentPlanetIndex:0\r\n    },\r\n    isLoading: false,\r\n    isError: null\r\n}\r\n\r\nconst filmsPage = (state = initialState, action ) =>{\r\n    switch (action.type) {\r\n        case 'FETCH_ALL_FILMS_REQUEST':\r\n            return {\r\n                ...state,\r\n                films:[],\r\n                isLoading: true,\r\n                isError: null\r\n            };\r\n        case 'FETCH_ALL_FILMS_SUCCESS':\r\n            return {\r\n                ...state,\r\n                films:action.payload,\r\n                currentFilm:{\r\n                    id:action.payload[0].id,\r\n                    index:0\r\n                },\r\n                isLoading: false,\r\n                isError: null\r\n            };\r\n        case 'FETCH_ALL_FILMS_FAILURE':\r\n            return {\r\n                ...state,\r\n                films:[],\r\n                isLoading:false,\r\n                isError: action.payload\r\n            };\r\n        case 'CHANGE_CURRENT_FILM':\r\n            if ((state.currentFilm.index === 0 && action.payload === -1) ||\r\n            (state.currentFilm.index === state.films.length-1 && action.payload === 1)\r\n            ) return state;\r\n            const newIndex = state.currentFilm.index + action.payload;\r\n            return {\r\n                ...state,\r\n                currentFilm:{\r\n                    id:state.films[newIndex].id,\r\n                    index:newIndex\r\n                }\r\n            }\r\n        case 'SET_CURRENT_FILM':\r\n            return {\r\n                ...state,\r\n                currentFilm:{\r\n                    id:state.films[action.payload].id,\r\n                    index:action.payload\r\n                }\r\n            }\r\n        case 'FETCH_RELATION_PLANETS_REQUEST':\r\n            return {\r\n                ...state,\r\n                relationPlanet:{\r\n                    planets:[],\r\n                    isLoading: true,\r\n                    isError: null,\r\n                    currentPlanetIndex:0\r\n\r\n                },\r\n            };\r\n        case 'FETCH_RELATION_PLANETS_SUCCESS':\r\n            return {\r\n                ...state,\r\n                relationPlanet:{\r\n                    planets:action.payload,\r\n                    isLoading: false,\r\n                    isError: null,\r\n                    currentPlanetIndex:0\r\n                }\r\n            };\r\n        case 'FETCH_RELATION_PLANETS_FAILURE':\r\n            return {\r\n                ...state,\r\n                relationPlanet:{\r\n                    planets:[],\r\n                    isLoading: false,\r\n                    isError: action.payload,\r\n                    currentPlanetIndex:0\r\n                }\r\n            };\r\n        case 'CHANGE_CURRENT_RELATION_PLANET':\r\n            if ((state.relationPlanet.currentPlanetIndex === 0 && action.payload === -1) ||\r\n            (state.relationPlanet.currentPlanetIndex === state.relationPlanet.planets.length-1 && action.payload === 1)\r\n            ) return state;\r\n            const newIndexPlanet = state.relationPlanet.currentPlanetIndex + action.payload;\r\n            return {\r\n                ...state,\r\n                relationPlanet:{\r\n                    ...state.relationPlanet,\r\n                    currentPlanetIndex:newIndexPlanet\r\n                }\r\n            }\r\n        case 'SET_CURRENT_RELATION_PLANET':\r\n            return {\r\n                ...state,\r\n                relationPlanet:{\r\n                    ...state.relationPlanet,\r\n                    currentPlanetIndex:action.payload\r\n                }\r\n            }\r\n        case 'FETCH_CURRENT_FILM_REQUEST':\r\n            return {\r\n                ...state,\r\n                currentFilmFull:{\r\n                    film:{},\r\n                    isLoading: true,\r\n                    isError: null\r\n                },\r\n            };\r\n        case 'FETCH_CURRENT_FILM_SUCCESS':\r\n            return {\r\n                ...state,\r\n                currentFilmFull:{\r\n                    film:action.payload,\r\n                    isLoading: false,\r\n                    isError: null\r\n                }\r\n            };\r\n        case 'FETCH_CURRENT_FILM_FAILURE':\r\n            return {\r\n                ...state,\r\n                currentFilmFull:{\r\n                    film:{},\r\n                    isLoading: false,\r\n                    isError: action.payload\r\n                }\r\n            };\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default filmsPage;","\r\nconst initialState = {\r\n    planets:[],\r\n    total:0,\r\n    currentPage:1,\r\n    currentPlanet:{\r\n        id:null,\r\n        index:0\r\n    },\r\n    isLoading: false,\r\n    isError: null\r\n}\r\n\r\nconst planetsPage = (state = initialState, action ) =>{\r\n    switch (action.type) {\r\n        case 'FETCH_ALL_PLANETS_REQUEST':\r\n            return {\r\n                ...state,\r\n                planets:[],\r\n                isLoading: true,\r\n                isError: null\r\n            };\r\n        case 'FETCH_ALL_PLANETS_SUCCESS':\r\n            return {\r\n                ...state,\r\n                planets:action.payload,\r\n                currentPlanet:{\r\n                    id:action.payload[0].id,\r\n                    index:0\r\n                },\r\n                isLoading: false,\r\n                isError: null\r\n            };\r\n        case 'FETCH_ALL_PLANETS_FAILURE':\r\n            return {\r\n                ...state,\r\n                planets:[],\r\n                isLoading:false,\r\n                isError: action.payload\r\n            };\r\n        case 'UP_CURRENT_PLANET':\r\n            if (state.currentPlanet.index === 0) return state;\r\n            return {\r\n                ...state,\r\n                currentPlanet:{\r\n                    id:state.planets[state.currentPlanet.index-1].id,\r\n                    index:state.currentPlanet.index-1\r\n                }\r\n            } \r\n        case 'DOWN_CURRENT_PLANET':\r\n            if (state.currentPlanet.index === state.planets.length-1) return state;\r\n            return {\r\n                ...state,\r\n                currentPlanet:{\r\n                    id:state.planets[state.currentPlanet.index+1].id,\r\n                    index:state.currentPlanet.index+1\r\n                }\r\n            }\r\n        case 'CHANGE_CURRENT_PLANET':\r\n            if ((state.currentPlanet.index === 0 && action.payload === -1) ||\r\n            (state.currentPlanet.index === state.planets.length-1 && action.payload === 1)\r\n            ) return state;\r\n            const newIndex = state.currentPlanet.index + action.payload;\r\n            return {\r\n                ...state,\r\n                currentPlanet:{\r\n                    id:state.planets[newIndex].id,\r\n                    index:newIndex\r\n                }\r\n            }\r\n        case 'SET_CURRENT_PLANET':\r\n                return {\r\n                    ...state,\r\n                    currentPlanet:{\r\n                        id:state.planets[action.payload].id,\r\n                        index:action.payload\r\n                    }\r\n                } \r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default planetsPage;","\r\nconst initialState = {\r\n    starships:[],\r\n    total:0,\r\n    currentPage:1,\r\n    serverSearch:'',\r\n    isLoading: false,\r\n    isError: null,\r\n}\r\n\r\nconst starshipsPage = (state = initialState, action ) =>{\r\n    switch (action.type) {\r\n        case 'FETCH_ALL_STARSHIPS_REQUEST':\r\n            return {\r\n                ...state,\r\n                starships:[],\r\n                isLoading: true,\r\n                isError: null\r\n            };\r\n        case 'FETCH_ALL_STARSHIPS_SUCCESS':\r\n            return {\r\n                ...state,\r\n                starships: action.payload.allStarships,\r\n                total: action.payload.totalStarships,\r\n                isLoading: false,\r\n                isError: null\r\n            };\r\n        case 'FETCH_ALL_STARSHIPS_FAILURE':\r\n            return {\r\n                ...state,\r\n                starships:[],\r\n                isLoading:false,\r\n                isError: action.payload\r\n            };\r\n        case 'SET_SERVER_SEARCH_STARSHIPS':\r\n            return {\r\n                ...state,\r\n                serverSearch: action.payload,\r\n             };\r\n        case 'SET_CURRENT_PAGE_STARSHIPS':\r\n            return {\r\n                ...state,\r\n                currentPage: action.payload,\r\n            };\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default starshipsPage;","const initialState = {\r\n    sortBy:'',\r\n    innerSearch:''\r\n}\r\n\r\nconst filterCharacters = (state = initialState, action ) =>{\r\n    switch (action.type) {\r\n        case 'SET_SORT_BY_CHARACTERS':\r\n            return {\r\n                ...state,\r\n                sortBy: action.payload,\r\n            };\r\n\r\n        case 'SET_INNER_SEARCH_CHARACTERS':\r\n            return {\r\n                ...state,\r\n                innerSearch: action.payload,\r\n            };\r\n    \r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default filterCharacters;","import { combineReducers } from 'redux';\r\nimport charactersPage from './character-page';\r\nimport filmsPage from './film-page';\r\nimport planetsPage from './planet-page';\r\nimport starshipsPage from './starship-page'\r\nimport filterCharacters from './filter-characters';\r\n\r\nconst rootReducer = combineReducers({\r\n  charactersPage,\r\n  filmsPage,\r\n  planetsPage,\r\n  starshipsPage,\r\n  filterCharacters\r\n})\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(\r\n    applyMiddleware(thunk)\r\n  ));\r\n\r\n  export default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './cpmponents/app';\nimport {Provider} from 'react-redux';\nimport {HashRouter as Router} from 'react-router-dom';  \n// import {BrowserRouter as Router} from 'react-router-dom';  \nimport store from './store';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n            <Provider store = {store}>\n                <Router>\n                    <App />\n                </Router>\n            </Provider>\n            , document.getElementById('root'));\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}